{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","placeholder","type","room","key","Chat","input","setInput","roomId","useParams","setRoomName","Date","length","timestamp","toDate","toUTCString","message","onChange","e","target","preventDefault","console","log","displayName","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9f04ca3.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyD5tGKTZSdD7Z5AvXKf1wqNfF1WM60QqBc\",\r\n  authDomain: \"messengerapp95.firebaseapp.com\",\r\n  databaseURL: \"https://messengerapp95.firebaseio.com\",\r\n  projectId: \"messengerapp95\",\r\n  storageBucket: \"messengerapp95.appspot.com\",\r\n  messagingSenderId: \"71442133242\",\r\n  appId: \"1:71442133242:web:67035364236dc6c4d25943\",\r\n  measurementId: \"G-623XE4DVH1\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './SidebarChat.css';\r\nimport { Avatar } from '@material-ui/core';\r\nimport db from './firebase';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction SidebarChat({ id, name, addNewChat }) {\r\n  const [seed, setSeed] = useState(\"\");\r\n  const [messages, setMessages] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      db.collection('rooms')\r\n        .doc(id)\r\n        .collection('messages')\r\n        .orderBy('timestamp', 'desc')\r\n        .onSnapshot(snapshot =>\r\n          setMessages(snapshot.docs.map(doc => doc.data()))\r\n        );\r\n    }\r\n  }, [id])\r\n\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 5000));\r\n  }, []);\r\n\r\n  const createChat = () => {\r\n    const roomName = prompt('Please enter name for chat room');\r\n\r\n    if (roomName) {\r\n      db.collection('rooms').add({\r\n        name: roomName,\r\n      });\r\n    }\r\n  };\r\n\r\n  return !addNewChat ? (\r\n    <Link to={`/rooms/${id}`}>\r\n      <div className=\"sidebarChat\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n        <div className=\"sidebarChat__info\">\r\n          <h2>{name}</h2>\r\n          <p>{messages[0]?.messages}</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  ) : (\r\n      <div onClick={createChat} className=\"sidebarChat\">\r\n        <h2>Add new Chat</h2>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChat\r\n","import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);","import React, { useEffect, useState } from 'react';\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport SearchOutlined from '@material-ui/icons/SearchOutlined';\r\nimport './Sidebar.css';\r\nimport SidebarChat from './SidebarChat';\r\nimport db from './firebase'\r\nimport { useStateValue } from './StateProvider';\r\n\r\nfunction Sidebar() {\r\n  const [rooms, setRooms] = useState([]);\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = db.collection('rooms');\r\n    db.collection('rooms').onSnapshot((snapshot) =>\r\n      setRooms(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__header\">\r\n        <Avatar src={user?.photoURL} />\r\n        <div className=\"sidebar__headerRight\">\r\n          <IconButton>\r\n            <DonutLargeIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <ChatIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar__search\">\r\n        <div className=\"sidebar__searchContainer\">\r\n          <SearchOutlined />\r\n          <input placeholder=\"Search or start new chat\" type=\"text\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar__chats\">\r\n        <SidebarChat addNewChat />\r\n        {rooms.map(room => (\r\n          <SidebarChat key={room.id} id={room.id} name={room.data.name} />\r\n        ))}\r\n      </div>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Sidebar;","import React, { useState, useEffect } from 'react';\r\nimport './Chat.css'\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport SearchOutlined from '@material-ui/icons/SearchOutlined';\r\nimport AttachFile from '@material-ui/icons/AttachFile';\r\nimport MoreVert from '@material-ui/icons/MoreVert';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport { useParams } from 'react-router-dom';\r\nimport db from './firebase';\r\nimport firebase from 'firebase';\r\nimport { useStateValue } from './StateProvider';\r\n\r\nfunction Chat() {\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const [seed, setSeed] = useState(\"\");\r\n  const { roomId } = useParams();\r\n  const [roomName, setRoomName] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    if (roomId) {\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .onSnapshot((snapshot) => setRoomName\r\n          (snapshot.data().name));\r\n\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot(snapshot =>\r\n          setMessages(snapshot.docs.map(doc => doc.data()))\r\n        );\r\n    }\r\n  }, [roomId]);\r\n\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 5000));\r\n  }, []);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    console.log('You type >>>', input);\r\n\r\n    db.collection('rooms').doc(roomId).collection('messages').add({\r\n      messages: input,\r\n      name: user.displayName,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat__header\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n        <div className=\"chat__headerInfo\">\r\n          <h3>{roomName}</h3>\r\n          <p>last seen{\" \"}{new Date(messages[messages.length - 1]?.timestamp?.toDate()).toUTCString()}</p>\r\n        </div>\r\n        <div className=\"chat__headerRight\">\r\n          <IconButton>\r\n            <SearchOutlined />\r\n          </IconButton>\r\n          <IconButton>\r\n            <AttachFile />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVert />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"chat__body\">\r\n        {messages.map(message => (\r\n          <p className={`chat__message ${true && 'chat__reciever'}`}>\r\n            <span className=\"chat__name\">{message.name}</span>\r\n            {message.messages}\r\n            <span className=\"chat__timestamp\">\r\n              {new Date(message.timestamp?.toDate()).toUTCString()}\r\n            </span>\r\n          </p>\r\n        ))}\r\n      </div>\r\n      <div className=\"chat__footer\">\r\n        <InsertEmoticonIcon />\r\n        <form>\r\n          <input value={input} onChange={(e) => setInput(e.target.value)} placeholder=\"Type a message...\" type=\"text\" />\r\n          <button onClick={sendMessage} type=\"submit\">Send a message</button>\r\n        </form>\r\n        <MicIcon />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chat\r\n","export const initialState = {\r\n  user: null,\r\n};\r\n\r\nexport const actionTypes = {\r\n  SET_USER: \"SET_USER\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case actionTypes.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\r\nimport './Login.css';\r\nimport { Button } from '@material-ui/core';\r\nimport { auth, provider } from './firebase'\r\nimport { actionTypes } from './reducer';\r\nimport { useStateValue } from './StateProvider';\r\n\r\nfunction Login() {\r\n  const [{ }, dispatch] = useStateValue();\r\n\r\n  const signIn = () => {\r\n    auth\r\n      .signInWithPopup(provider)\r\n      .then(result => {\r\n        dispatch({\r\n          type: actionTypes.SET_USER,\r\n          user: result.user,\r\n        });\r\n      })\r\n      .catch(error => alert(error.message));\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__container\">\r\n        <img src=\"https://i.ibb.co/K0RhWQw/img1.png\" alt=\"logo messenger\" />\r\n        <div className=\"login__text\">\r\n          <h1>Sign in to MessengerApp</h1>\r\n        </div>\r\n        <Button onClick={signIn}>Sign in With Google</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login\r\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\nimport Login from './Login';\nimport { useStateValue } from './StateProvider';\n\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n\n  return (\n    <div className=\"app\">\n\n      {!user ? (\n        <Login />\n      ) : (\n          <div className=\"app__body\">\n            <Router>\n              <Sidebar />\n              <Switch>\n                <Route path=\"/rooms/:roomId\">\n                  <Chat />\n                </Route>\n                <Route path=\"/\">\n                  <Chat />\n                </Route>\n              </Switch>\n            </Router>\n          </div>\n        )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer, { initialState } from './reducer';\nimport { StateProvider } from './StateProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}